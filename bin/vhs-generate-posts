#!/usr/bin/ruby
require 'yaml'
require 'pathname'
require 'active_support/core_ext'
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
require 'shell_script'

$script = ShellScript.new do
	stdin :yaml
	option :location, :short => :l
	argument :source_dir, :cast => Pathname
end.parse!

source_dir = $script.source_dir
$posts_dir = source_dir + '_posts'

raise "source directory does not exist: #{source_dir}" unless source_dir.directory?
raise "_posts directory does not exist: #{$posts_dir}" unless $posts_dir.directory?

sets = $script.stdin

date = Time.now.yesterday.strftime('%Y-%m-%d')

if sets[:info] and first = sets[:info][:first_entry_time] and last = sets[:info][:last_entry_time]
	date = Time.at(first.to_i / 2 + last.to_i / 2).strftime('%Y-%m-%d')
end

def out_file(date, name)
	$posts_dir + "#{date}-#{name}.textile"
end

def write_post(date, title, tags)
	# location stuff
	title = title + ' - ' + $script.location if $script.location
	tags << $script.location.downcase if $script.location

	out_file(date, title.downcase.tr(' :', '-')).open('w') do |io|
		io.puts '---'
		io.puts 'layout: post'
		io.puts "title: #{title}"
		io.puts "tags: [#{tags.join(' ')}]"
		io.puts '---'
		yield io
	end
end

sets.each_pair do |set, data|
	case set
	when :hit
		write_post(date, 'Varnish hit stats', %w{varnish hit stats}) do |io|
			total = data.delete('total')

			io.puts  "|_. Page Class |_. Pass |_. Hit |_. Miss |_. Total |_. Hit/Total |"
			data.keys.sort.each do |page_class|
				stats = data[page_class]
				io.puts "| %s | %i | %i | %i | %i | %f |" % [page_class, stats[:pass], stats[:hit], stats[:miss], stats[:total], stats[:hit_to_total_ratio]]
			end
			io.puts "| *total* | *%i* | *%i* | *%i* | *%i* | *%f* |" % [total[:pass], total[:hit], total[:miss], total[:total], total[:hit].to_f / total[:total]]
		end
	when :response_time
		write_post(date, 'Varnish response time stats', %w{varnish response time stats}) do |io|
			total = data.delete('total')

			io.puts  "|_. Page Class |_. Total Requests |_. Minimum Response Time [s]  |_. Maximum Response Time [s] |_. Average Response Time [s] |"
			data.keys.sort.each do |page_class|
				stats = data[page_class]
				io.puts "| %s | %i | %f | %f | %f |" % [page_class, stats[:total_requests], stats[:min_time], stats[:max_time], stats[:average_time]]
			end
			io.puts "| *total* | *%i* | *%f* | *%f* | *%f* |" % [total[:total_requests], total[:min_time], total[:max_time], total[:average_time]]
		end
	end
end



